[{"D:\\Documents\\Project\\react-movie-project\\src\\index.js":"1","D:\\Documents\\Project\\react-movie-project\\src\\reportWebVitals.js":"2","D:\\Documents\\Project\\react-movie-project\\src\\App.js":"3","D:\\Documents\\Project\\react-movie-project\\src\\pages\\Home.js":"4","D:\\Documents\\Project\\react-movie-project\\src\\pages\\Movies.js":"5","D:\\Documents\\Project\\react-movie-project\\src\\pages\\Contact.js":"6","D:\\Documents\\Project\\react-movie-project\\src\\pages\\MovieDetails.js":"7","D:\\Documents\\Project\\react-movie-project\\src\\layouts\\Default.js":"8","D:\\Documents\\Project\\react-movie-project\\src\\constants.js":"9","D:\\Documents\\Project\\react-movie-project\\src\\components\\carousel\\Carousel.js":"10","D:\\Documents\\Project\\react-movie-project\\src\\components\\movie\\MovieGridItem.js":"11","D:\\Documents\\Project\\react-movie-project\\src\\components\\movie\\MovieListItem.js":"12","D:\\Documents\\Project\\react-movie-project\\src\\components\\contact\\ContactForm.js":"13","D:\\Documents\\Project\\react-movie-project\\src\\components\\navbar\\Navbar.js":"14","D:\\Documents\\Project\\react-movie-project\\src\\network\\network-client.js":"15","D:\\Documents\\Project\\react-movie-project\\src\\pages\\TVSeries.js":"16","D:\\Documents\\Project\\react-movie-project\\src\\redux\\tv\\action-types.js":"17","D:\\Documents\\Project\\react-movie-project\\src\\redux\\movies\\actions.js":"18","D:\\Documents\\Project\\react-movie-project\\src\\redux\\movies\\action-types.js":"19","D:\\Documents\\Project\\react-movie-project\\src\\redux\\tv\\actions.js":"20","D:\\Documents\\Project\\react-movie-project\\src\\redux\\movies\\reducers.js":"21","D:\\Documents\\Project\\react-movie-project\\src\\pages\\TVSeriesDetails.js":"22","D:\\Documents\\Project\\react-movie-project\\src\\redux\\tv\\reducers.js":"23","D:\\Documents\\Project\\react-movie-project\\src\\components\\filters\\movies\\Filters.js":"24","D:\\Documents\\Project\\react-movie-project\\src\\components\\filters\\movies\\SelectGenres.js":"25","D:\\Documents\\Project\\react-movie-project\\src\\components\\filters\\movies\\SelectYear.js":"26","D:\\Documents\\Project\\react-movie-project\\src\\components\\filters\\tv\\Filters.js":"27","D:\\Documents\\Project\\react-movie-project\\src\\components\\filters\\tv\\SelectYear.js":"28","D:\\Documents\\Project\\react-movie-project\\src\\components\\filters\\tv\\SelectGenres.js":"29","D:\\Documents\\Project\\react-movie-project\\src\\components\\tv\\tvGridItem.js":"30","D:\\Documents\\Project\\react-movie-project\\src\\components\\tv\\tvListItem.js":"31","D:\\Documents\\Project\\react-movie-project\\src\\redux\\index.js":"32","D:\\Documents\\Project\\react-movie-project\\src\\redux\\app\\reducers.js":"33","D:\\Documents\\Project\\react-movie-project\\src\\redux\\app\\action-types.js":"34","D:\\Documents\\Project\\react-movie-project\\src\\redux\\app\\actions.js":"35","D:\\Documents\\Project\\react-movie-project\\src\\pages\\Profile.js":"36","D:\\Documents\\Project\\react-movie-project\\src\\components\\profile\\UserProfile.js":"37","D:\\Documents\\Project\\react-movie-project\\src\\components\\user\\UserMenu.js":"38","D:\\Documents\\Project\\react-movie-project\\src\\components\\user\\Registration.js":"39","D:\\Documents\\Project\\react-movie-project\\src\\pages\\AddMovie.js":"40","D:\\Documents\\Project\\react-movie-project\\src\\components\\movie\\CreateMovie.js":"41","D:\\Documents\\Project\\react-movie-project\\src\\pages\\AddTvSerie.js":"42","D:\\Documents\\Project\\react-movie-project\\src\\components\\tv\\CreateTvSerie.js":"43","D:\\Documents\\Project\\react-movie-project\\src\\components\\movie\\AddMovieItem.js":"44","D:\\Documents\\Project\\react-movie-project\\src\\components\\tv\\AddTvSerieItem.js":"45","D:\\Documents\\Project\\react-movie-project\\src\\components\\movie\\Rating.js":"46","D:\\Documents\\Project\\react-movie-project\\src\\components\\tv\\Rating.js":"47"},{"size":1674,"mtime":1622313042185,"results":"48","hashOfConfig":"49"},{"size":362,"mtime":1613742720437,"results":"50","hashOfConfig":"49"},{"size":1818,"mtime":1622308586315,"results":"51","hashOfConfig":"49"},{"size":606,"mtime":1614983893377,"results":"52","hashOfConfig":"49"},{"size":2565,"mtime":1614985968132,"results":"53","hashOfConfig":"49"},{"size":270,"mtime":1613742495971,"results":"54","hashOfConfig":"49"},{"size":1894,"mtime":1622848224313,"results":"55","hashOfConfig":"49"},{"size":243,"mtime":1613742475085,"results":"56","hashOfConfig":"49"},{"size":512,"mtime":1622842762534,"results":"57","hashOfConfig":"49"},{"size":2024,"mtime":1614615690798,"results":"58","hashOfConfig":"49"},{"size":994,"mtime":1622844761511,"results":"59","hashOfConfig":"49"},{"size":1200,"mtime":1614637750116,"results":"60","hashOfConfig":"49"},{"size":1229,"mtime":1614987176285,"results":"61","hashOfConfig":"49"},{"size":1397,"mtime":1622308017361,"results":"62","hashOfConfig":"49"},{"size":1701,"mtime":1613742484916,"results":"63","hashOfConfig":"49"},{"size":2503,"mtime":1614987070961,"results":"64","hashOfConfig":"49"},{"size":229,"mtime":1614719925279,"results":"65","hashOfConfig":"49"},{"size":1407,"mtime":1614719685457,"results":"66","hashOfConfig":"49"},{"size":231,"mtime":1614719788734,"results":"67","hashOfConfig":"49"},{"size":1394,"mtime":1614719987295,"results":"68","hashOfConfig":"49"},{"size":1338,"mtime":1614719623352,"results":"69","hashOfConfig":"49"},{"size":1853,"mtime":1614723588798,"results":"70","hashOfConfig":"49"},{"size":1335,"mtime":1614720025646,"results":"71","hashOfConfig":"49"},{"size":1394,"mtime":1614985720921,"results":"72","hashOfConfig":"49"},{"size":2227,"mtime":1614720242404,"results":"73","hashOfConfig":"49"},{"size":1075,"mtime":1614720132260,"results":"74","hashOfConfig":"49"},{"size":1305,"mtime":1614722456827,"results":"75","hashOfConfig":"49"},{"size":1067,"mtime":1614720137846,"results":"76","hashOfConfig":"49"},{"size":2215,"mtime":1614720212785,"results":"77","hashOfConfig":"49"},{"size":991,"mtime":1614987009481,"results":"78","hashOfConfig":"49"},{"size":1197,"mtime":1614724933750,"results":"79","hashOfConfig":"49"},{"size":201,"mtime":1614713050956,"results":"80","hashOfConfig":"49"},{"size":327,"mtime":1614719634753,"results":"81","hashOfConfig":"49"},{"size":87,"mtime":1614719798719,"results":"82","hashOfConfig":"49"},{"size":134,"mtime":1614724645314,"results":"83","hashOfConfig":"49"},{"size":868,"mtime":1622304751399,"results":"84","hashOfConfig":"49"},{"size":1061,"mtime":1622847995230,"results":"85","hashOfConfig":"49"},{"size":4123,"mtime":1622809065079,"results":"86","hashOfConfig":"49"},{"size":1477,"mtime":1621601415395,"results":"87","hashOfConfig":"49"},{"size":1272,"mtime":1622843749050,"results":"88","hashOfConfig":"49"},{"size":2867,"mtime":1622310918305,"results":"89","hashOfConfig":"49"},{"size":1294,"mtime":1622845385873,"results":"90","hashOfConfig":"49"},{"size":2905,"mtime":1622310830087,"results":"91","hashOfConfig":"49"},{"size":1168,"mtime":1622846192446,"results":"92","hashOfConfig":"49"},{"size":1180,"mtime":1622847444902,"results":"93","hashOfConfig":"49"},{"size":472,"mtime":1622845987054,"results":"94","hashOfConfig":"49"},{"size":474,"mtime":1622847409336,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"1nym33i",{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"98"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"98"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"98"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"98"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"98"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"98"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"98"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"98"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"98"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"98"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"98"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"98"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"98"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"98"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Documents\\Project\\react-movie-project\\src\\index.js",[],["206","207"],"D:\\Documents\\Project\\react-movie-project\\src\\reportWebVitals.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\App.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\pages\\Home.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\pages\\Movies.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\pages\\Contact.js",[],["208","209"],"D:\\Documents\\Project\\react-movie-project\\src\\pages\\MovieDetails.js",["210"],"D:\\Documents\\Project\\react-movie-project\\src\\layouts\\Default.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\constants.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\components\\carousel\\Carousel.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\components\\movie\\MovieGridItem.js",["211"],"import {\n    Card, \n    CardImg,\n    CardText,\n    CardBody,\n    CardTitle,\n    Button,\n  } from 'reactstrap';\nimport {Link} from 'react-router-dom';\n\nimport constants from '../../constants';\n\nconst MovieGridItem = props => {\n\n    const getMovieImage = () => {\n      if(!props.poster_path){\n        return null;\n      }\n      return <CardImg \n        top \n        width=\"100%\" \n        src={`${constants.posterPath}${props.poster_path}`} \n      />\n    }\n\n    return (\n      <div className=\"col-md-3\">\n        <Card className=\"mb-3\">\n          {getMovieImage()}\n          <CardBody>\n            <CardTitle tag=\"h5\" className=\"movie-title text-truncate text-center\">{props.title}</CardTitle>\n            <CardText className=\"text-center\">{props.overview}</CardText>\n            <Link to={`/movie/${props.id}`} className=\"btn btn-secondary d-block\">\n              Детайли\n            </Link>\n          </CardBody>\n        </Card>\n      </div>\n    );\n  };\n  \nexport default MovieGridItem;\n  ","D:\\Documents\\Project\\react-movie-project\\src\\components\\movie\\MovieListItem.js",["212"],"import {\n    Card, \n    CardImg,\n    CardText,\n    CardBody,\n    CardTitle,\n    Button,\n  } from 'reactstrap';\nimport {Link} from 'react-router-dom';\nimport constants from '../../constants';\n\nconst MovieListItem = props => {\n\n    const getMovieImage = () => {\n      if(!props.poster_path){\n        return null;\n      }\n      return <CardImg \n        top \n        width=\"100%\" \n        src={`${constants.posterPath}${props.poster_path}`} \n      />\n    }\n\n    return (\n      <div className=\"col-12\">\n          <Card className=\"mb-3\">\n            <div className=\"row\">\n              <div className=\"col-3\">\n                {getMovieImage()}\n              </div>\n              <div className=\"col\">\n                <CardBody>\n                  <CardTitle tag=\"h5\" className=\"movie-title text-truncate\">{props.title}</CardTitle>\n                  <CardText className=\"movie-description\">{props.overview}</CardText>\n                  <Link to={`/movie/${props.id}`} className=\"btn btn-secondary\">\n                      Детайли\n                  </Link>\n                </CardBody>\n              </div>\n            </div>\n          </Card>\n      </div>\n    );\n  };\n  \nexport default MovieListItem;\n  ","D:\\Documents\\Project\\react-movie-project\\src\\components\\contact\\ContactForm.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\components\\navbar\\Navbar.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\network\\network-client.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\pages\\TVSeries.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\redux\\tv\\action-types.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\redux\\movies\\actions.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\redux\\movies\\action-types.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\redux\\tv\\actions.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\redux\\movies\\reducers.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\pages\\TVSeriesDetails.js",["213"],"import React, {useEffect} from 'react';\nimport {\n    useParams\n  } from \"react-router-dom\";\n\nimport {useDispatch, useSelector} from 'react-redux';\nimport {getTV, setTV} from '../redux/tv/actions';\nimport {\n    Card, \n    CardImg,\n    CardText,\n    CardBody,\n    CardTitle,\n    CardSubtitle,\n  } from 'reactstrap';\nimport constants from '../constants';\n\nfunction TVSeriesDetails(props) {\n\n    const tv = useSelector(state => state.tv);\n    const dispatch = useDispatch();\n    const { id } = useParams();\n   \n    // Equivalent to componentDidMount\n    useEffect(()=>{\n        dispatch(getTV({\n            tvId: id\n        }))\n\n        //Equivalent to componentWillUnmount\n        return () => {\n            dispatch(setTV({}))\n        }\n    },[])\n\n    const getTVImage = () => {\n        if(!tv.poster_path){\n          return null;\n        }\n        return <CardImg \n          top \n          width=\"100%\" \n          src={`${constants.posterPath}${tv.poster_path}`} \n        />\n      }\n    return <>\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col\">\n                <Card className=\"mb-3\">\n                    <div className=\"row\">\n                    <div className=\"col-3\">\n                        {getTVImage()}\n                    </div>\n                    <div className=\"col\">\n                        <CardBody>\n                            <CardTitle tag=\"h5\" className=\"text-truncate\">{tv.name}</CardTitle>\n                            <CardSubtitle>{tv.release_date}</CardSubtitle>\n                            <CardText className=\"movie-description\">{tv.overview}</CardText>\n                        </CardBody>\n                    </div>\n                    </div>\n                </Card>\n                </div>\n            </div>\n        </div>\n   \n    </>\n}\nexport default TVSeriesDetails;","D:\\Documents\\Project\\react-movie-project\\src\\redux\\tv\\reducers.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\components\\filters\\movies\\Filters.js",["214"],"import React, {useEffect} from 'react';\nimport SelectYear from './SelectYear';\nimport SelectGenres from './SelectGenres';\nimport {Button} from 'reactstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getMovies } from '../../../redux/movies/actions';\n\nconst Filters = (props) => {\n\n    const selectedYear = useSelector(state => state.movies.selectedFilters.selectedYear);\n    const selectedGenres = useSelector(state => state.movies.selectedFilters.selectedGenres);\n\n    const dispatch = useDispatch();\n    \n    const loadMovies = () => {\n        dispatch(getMovies({\n            year: selectedYear,\n            page: 1,\n            with_genres: selectedGenres.toString(),\n        }));\n    }\n\n    useEffect(() => {\n        loadMovies();\n    }, []);\n\n    \n\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col-md-4\">\n                    <SelectYear/>\n                </div>\n                <div className=\"col-md-4\">\n                    <SelectGenres/>\n                </div>\n                <div className=\"col-md-4\">\n                    \n                </div>\n            </div>\n            <div className=\"row mb-3\">\n                <div className=\"col\">\n                    <Button color=\"secondary\" onClick={loadMovies}>Търси</Button>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Filters;","D:\\Documents\\Project\\react-movie-project\\src\\components\\filters\\movies\\SelectGenres.js",["215"],"import React, { useEffect } from 'react';\nimport { FormGroup, Label, Input } from 'reactstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getGenres, setSelectedGenres } from '../../../redux/movies/actions';\nimport { createSelector } from 'reselect';\nconst SelectGenres = (props) => {\n\n    const dispatch = useDispatch();\n\n    const genres = useSelector(state => state.movies.genres);\n\n    useEffect(() => {\n        dispatch(getGenres({\n            language: 'bg-BG',\n        }));\n    }, []);\n\n    const selectedFilters = useSelector(state => state.movies.selectedFilters)\n\n    const inputOnChange = (event) => {\n        const isChecked = event.target.checked;\n        const genreId = event.target.value;\n        let currentGenres = selectedFilters.selectedGenres;\n        console.log('inputOnChange', isChecked, genreId);\n        if(isChecked){\n            currentGenres.push(genreId);\n        }else {\n            currentGenres = currentGenres.filter(id => id !== genreId);\n        }\n        dispatch(setSelectedGenres(currentGenres));\n    }\n\n    const getId = (_, id) => id;\n    const getSelectedGenres = state => state.selectedGenres;\n\n    const isGenreSelected = createSelector(\n        getSelectedGenres,\n        getId,\n        (genres, id) => {\n            return genres.includes(id)\n        }\n    )\n\n    const isChecked = (genreId) => {\n        const isChecked = isGenreSelected(selectedFilters, genreId);\n        return isChecked;\n    }\n\n    const getGenresCheckboxes = () => {\n        const genresCheckboxes = genres.map(genre => {\n            return <FormGroup check inline key={genre.id}>\n                <Label check>\n                    <Input type=\"checkbox\" \n                    checked={isChecked(genre.id.toString())} \n                    value={genre.id}\n                    onChange={inputOnChange}/> \n                    {genre.name}\n                </Label>\n            </FormGroup>\n        })\n        return genresCheckboxes;\n    }\n\n    return (\n        <FormGroup>\n            <Label className=\"genre-label\">Избери жанр</Label>\n            <div>\n                {getGenresCheckboxes()}\n            </div>\n        </FormGroup>\n       \n    );\n}\n\nexport default SelectGenres;","D:\\Documents\\Project\\react-movie-project\\src\\components\\filters\\movies\\SelectYear.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\components\\filters\\tv\\Filters.js",["216"],"import React, {useEffect} from 'react';\nimport SelectYear from './SelectYear';\nimport SelectGenres from './SelectGenres';\nimport {Button} from 'reactstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTVSeries } from '../../../redux/tv/actions';\n\nconst Filters = (props) => {\n\n    const selectedYear = useSelector(state => state.tv.selectedFilters.selectedYear);\n    const selectedGenres = useSelector(state => state.tv.selectedFilters.selectedGenres);\n\n    const dispatch = useDispatch();\n    \n    const loadTVSeries = () => {\n        dispatch(getTVSeries({\n            year: selectedYear,\n            page: 1,\n            with_genres: selectedGenres.toString(),\n        }));\n    }\n\n    useEffect(() => {\n        loadTVSeries();\n    }, []);\n\n    \n\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col-md-4\">\n                    <SelectYear/>\n                </div>\n                <div className=\"col-md-4\">\n                    <SelectGenres/>\n                </div>\n            </div>\n            <div className=\"row mb-3\">\n                <div className=\"col\">\n                    <Button color=\"secondary\" onClick={loadTVSeries}>Търси</Button>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Filters;","D:\\Documents\\Project\\react-movie-project\\src\\components\\filters\\tv\\SelectYear.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\components\\filters\\tv\\SelectGenres.js",["217"],"import React, { useEffect } from 'react';\nimport { FormGroup, Label, Input } from 'reactstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getGenres, setSelectedGenres } from '../../../redux/tv/actions';\nimport { createSelector } from 'reselect';\nconst SelectGenres = (props) => {\n\n    const dispatch = useDispatch();\n\n    const genres = useSelector(state => state.tv.genres);\n\n    useEffect(() => {\n        dispatch(getGenres({\n            language: 'bg-BG',\n        }));\n    }, []);\n\n    const selectedFilters = useSelector(state => state.tv.selectedFilters)\n\n    const inputOnChange = (event) => {\n        const isChecked = event.target.checked;\n        const genreId = event.target.value;\n        let currentGenres = selectedFilters.selectedGenres;\n        console.log('inputOnChange', isChecked, genreId);\n        if(isChecked){\n            currentGenres.push(genreId);\n        }else {\n            currentGenres = currentGenres.filter(id => id !== genreId);\n        }\n        dispatch(setSelectedGenres(currentGenres));\n    }\n\n    const getId = (_, id) => id;\n    const getSelectedGenres = state => state.selectedGenres;\n\n    const isGenreSelected = createSelector(\n        getSelectedGenres,\n        getId,\n        (genres, id) => {\n            return genres.includes(id)\n        }\n    )\n\n    const isChecked = (genreId) => {\n        const isChecked = isGenreSelected(selectedFilters, genreId);\n        return isChecked;\n    }\n\n    const getGenresCheckboxes = () => {\n        const genresCheckboxes = genres.map(genre => {\n            return <FormGroup check inline key={genre.id}>\n                <Label check>\n                    <Input type=\"checkbox\" \n                    checked={isChecked(genre.id.toString())} \n                    value={genre.id}\n                    onChange={inputOnChange}/> \n                    {genre.name}\n                </Label>\n            </FormGroup>\n        })\n        return genresCheckboxes;\n    }\n\n    return (\n        <FormGroup>\n            <Label className=\"genre-label\">Избери жанр</Label>\n            <div>\n                {getGenresCheckboxes()}\n            </div>\n        </FormGroup>\n       \n    );\n}\n\nexport default SelectGenres;","D:\\Documents\\Project\\react-movie-project\\src\\components\\tv\\tvGridItem.js",["218"],"import {\n    Card, \n    CardImg,\n    CardText,\n    CardBody,\n    CardTitle,\n    Button,\n  } from 'reactstrap';\nimport {Link} from 'react-router-dom';\n\nimport constants from '../../constants';\n\nconst tvGridItem = props => {\n\n    const getTVSeriesImage = () => {\n      if(!props.poster_path){\n        return null;\n      }\n      return <CardImg \n        top \n        width=\"100%\" \n        src={`${constants.posterPath}${props.poster_path}`} \n      />\n    }\n\n    return (\n      <div className=\"col-md-3\">\n        <Card className=\"mb-3\">\n          {getTVSeriesImage()}\n          <CardBody>\n            <CardTitle tag=\"h5\" className=\"movie-title text-truncate text-center\">{props.title}</CardTitle>\n            <CardText className=\"text-center\">{props.overview}</CardText>\n            <Link to={`/tv/${props.id}`} className=\"btn btn-secondary d-block\">\n              Детайли\n            </Link>\n          </CardBody>\n        </Card>\n      </div>\n    );\n  };\n  \nexport default tvGridItem;\n  ","D:\\Documents\\Project\\react-movie-project\\src\\components\\tv\\tvListItem.js",["219"],"import {\n    Card, \n    CardImg,\n    CardText,\n    CardBody,\n    CardTitle,\n    Button,\n  } from 'reactstrap';\nimport {Link} from 'react-router-dom';\nimport constants from '../../constants';\n\nconst tvListItem = props => {\n\n    const getTVSeriesImage = () => {\n      if(!props.poster_path){\n        return null;\n      }\n      return <CardImg \n        top \n        width=\"100%\" \n        src={`${constants.posterPath}${props.poster_path}`} \n      />\n    }\n\n    return (\n      <div className=\"col-12\">\n          <Card className=\"mb-3\">\n            <div className=\"row\">\n              <div className=\"col-3\">\n                {getTVSeriesImage()}\n              </div>\n              <div className=\"col\">\n                <CardBody>\n                  <CardTitle tag=\"h5\" className=\"movie-title text-truncate\">{props.title}</CardTitle>\n                  <CardText className=\"movie-description\">{props.overview}</CardText>\n                  <Link to={`/tv/${props.id}`} className=\"btn btn-secondary\">\n                      Детайли\n                  </Link>\n                </CardBody>\n              </div>\n            </div>\n          </Card>\n      </div>\n    );\n  };\n  \nexport default tvListItem;\n  ","D:\\Documents\\Project\\react-movie-project\\src\\redux\\index.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\redux\\app\\reducers.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\redux\\app\\action-types.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\redux\\app\\actions.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\pages\\Profile.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\components\\profile\\UserProfile.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\components\\user\\UserMenu.js",["220","221","222"],"import React, { useEffect, useState } from 'react';\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n  } from 'reactstrap';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { gql, useMutation, useLazyQuery } from '@apollo/client';\r\n\r\n\r\nconst LOGIN = gql`\r\n  mutation Login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password)\r\n  }\r\n`;\r\n\r\nconst LOGOUT = gql`\r\n  mutation Logout {\r\n    logout {\r\n      _id\r\n    }\r\n  }\r\n`;\r\n\r\nconst CREATE_USER = gql`\r\n  mutation CreateUser($email: String!, $password: String!, $firstName: String, $lastName: String) {\r\n    createUser\r\n  }\r\n`;\r\n\r\nconst GET_CURRENT_USER = gql`\r\n  query getCurrentUser {\r\n    currentUser {\r\n      _id\r\n      email\r\n    }\r\n  }\r\n`;\r\n\r\nconst UserMenu = (props) => {\r\n\r\n    useEffect(() => {\r\n       getCurrentUser(); \r\n    }, []);\r\n  \r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n  \r\n    const [login, { data }] = useMutation(LOGIN);\r\n    const [logout] = useMutation(LOGOUT);\r\n  \r\n    const [getCurrentUser, queryData] = useLazyQuery(GET_CURRENT_USER);\r\n  \r\n    const onLogin = () => {\r\n      const loginData = {\r\n        variables: {\r\n          email,\r\n          password,\r\n        }\r\n      }\r\n  \r\n      login(loginData).then( response => {\r\n        localStorage.setItem('token', response.data.login);\r\n        getCurrentUser();\r\n        setModal(false);\r\n      });\r\n    }\r\n  \r\n    const [modal, setModal] = useState(false);\r\n  \r\n    const toggleModal = () => setModal(!modal);\r\n  \r\n    const onLogout = () => {\r\n        logout();\r\n        localStorage.setItem('token', \"\");\r\n        getCurrentUser();\r\n    }\r\n\r\n    const getUserMenu = () => {\r\n    if(queryData.loading || !queryData.called) {\r\n        return null;\r\n    }\r\n    if(queryData.data && queryData.data.currentUser) {\r\n        return <div className=\"d-flex align-items-center\">\r\n            <FontAwesomeIcon icon={faUser}/>\r\n            <div className=\"mx-2\">{queryData.data.currentUser.email}</div>\r\n            <Button onClick={()=> {\r\n                onLogout();\r\n            }}>Изход</Button>     \r\n        </div>\r\n    }\r\n  \r\n      return <Button onClick={()=> {\r\n        setModal(true)\r\n        }}>Вход</Button>\r\n    }\r\n  \r\n    return (\r\n        <>\r\n            { getUserMenu() }\r\n            <Modal isOpen={modal} toggle={toggleModal}>\r\n                <ModalHeader toggle={toggleModal}>Влезте в профила си:</ModalHeader>\r\n                <ModalBody>\r\n                <Form onSubmit={e => {\r\n                    e.preventDefault();\r\n                    onLogin()\r\n                }}>\r\n                    <FormGroup>\r\n                        <Label for=\"email\">Email адрес:</Label>\r\n                        <Input\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        id=\"email\"\r\n                        value={email}\r\n                        onChange={e => setEmail(e.target.value)}\r\n                        placeholder=\"Въведете email адрес\"/>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"password\">Парола:</Label>\r\n                        <Input\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        id=\"password\"\r\n                        value={password}\r\n                        onChange={e => setPassword(e.target.value)}\r\n                        placeholder=\"Въведете парола\"/>\r\n                    </FormGroup>\r\n                    <div className=\"btn btn-secondary d-block\">\r\n                    <Button color=\"secondary\" type=\"submit\">Вход</Button>{' '}\r\n                    {/* <Button color=\"secondary\" onClick={toggleModal}>Отказ</Button> */}\r\n                    </div>\r\n                    </Form>\r\n                </ModalBody>\r\n          </Modal>\r\n        </>\r\n    );\r\n  }\r\n  \r\n  export default UserMenu;","D:\\Documents\\Project\\react-movie-project\\src\\components\\user\\Registration.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\pages\\AddMovie.js",["223","224"],"import { useQuery, gql } from '@apollo/client';\r\nimport CreateMovie from \"../components/movie/CreateMovie\";\r\nimport AddMovieItem from \"../components/movie/AddMovieItem\";\r\n\r\nconst GET_MOVIES = gql`\r\n    query getMovies {\r\n        movies {\r\n            _id\r\n            title\r\n            description\r\n            rating \r\n            image\r\n        }\r\n    }\r\n`;\r\n\r\nfunction AddMovies(props) {\r\n\r\n    const { loading, error, data } = useQuery(GET_MOVIES);\r\n\r\n    const getMovies = () => {\r\n        if(!data){\r\n            return null;\r\n        }\r\n        const moviesList = data.movies.map(movie => {\r\n            return <AddMovieItem\r\n                key={movie._id}\r\n                title={movie.title}\r\n                description={movie.description}\r\n                rating={movie.rating}\r\n                image={movie.image}\r\n            ></AddMovieItem>\r\n        })\r\n        return moviesList;\r\n    }\r\n\r\n    return <>\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <CreateMovie/>\r\n                </div>\r\n                <div className=\"col\">\r\n                    { getMovies() }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </>\r\n}\r\nexport default AddMovies;","D:\\Documents\\Project\\react-movie-project\\src\\components\\movie\\CreateMovie.js",["225"],"import { gql, useMutation } from '@apollo/client';\r\nimport { useState } from 'react';\r\nimport { Button, Form, FormGroup, Input, Label } from 'reactstrap';\r\n\r\nconst CREATE_MOVIE = gql`\r\n    mutation CreateMovie($data: CreateMovieInput!) {\r\n        createMovie(data: $data) {\r\n             _id\r\n             title\r\n             description\r\n             rating\r\n        }\r\n    }\r\n`;\r\n\r\nfunction CreateMovies(props) {\r\n\r\n    const [title, setTitle] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [rating, setRating] = useState('');\r\n\r\n    const [createMovie, { data }] = useMutation(CREATE_MOVIE);\r\n\r\n    const onCreateMovie = () => {\r\n        const movieData = { \r\n            variables: { \r\n                data: {\r\n                    title,\r\n                    description,\r\n                    rating: Number(rating),\r\n                } \r\n            } \r\n    }\r\n        createMovie(movieData).then( response => {\r\n            console.log(response);\r\n        });\r\n        resetState();\r\n    }\r\n    const resetState = () => {\r\n        setTitle('');\r\n        setDescription('');\r\n        setRating('');\r\n    }\r\n\r\n    const getOptions = () => {\r\n        let options = [];\r\n        for(let i = 0; i < 11; i++){\r\n            options.push(<option value={i} key={i}>{i}</option>)\r\n        } \r\n        return options;\r\n    }\r\n\r\n    return <>\r\n        <Form onSubmit={e => {\r\n            e.preventDefault();\r\n            onCreateMovie()\r\n        }}>\r\n            <FormGroup>\r\n                <Label for=\"title\">Заглавие</Label>\r\n                <Input \r\n                    type=\"title\" \r\n                    name=\"title\" \r\n                    id=\"title\"\r\n                    value={title}\r\n                    onChange={e => setTitle(e.target.value)}\r\n                    placeholder=\"Име на филма\" />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label for=\"description\">Описание</Label>\r\n                <Input \r\n                    type=\"text\" \r\n                    name=\"description\" \r\n                    id=\"description\"\r\n                    value={description}\r\n                    onChange={e => setDescription(e.target.value)} \r\n                    placeholder=\"Описание на филма\" />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label for=\"rating\">Рейтинг</Label>\r\n                <Input \r\n                    type=\"select\" \r\n                    name=\"rating\" \r\n                    id=\"rating\" \r\n                    value={rating}\r\n                    onChange={e => setRating(e.target.value)}\r\n                    >\r\n                    { getOptions() }\r\n                </Input> \r\n            </FormGroup>\r\n            <Button type=\"submit\">Добави филм</Button>\r\n        </Form>\r\n    </>\r\n}\r\nexport default CreateMovies;","D:\\Documents\\Project\\react-movie-project\\src\\pages\\AddTvSerie.js",["226","227"],"import { useQuery, gql } from '@apollo/client';\r\nimport CreateTvSerie from \"../components/tv/CreateTvSerie\";\r\nimport AddTvSerieItem from \"../components/tv/AddTvSerieItem\";\r\n\r\nconst GET_TVSERIES = gql`\r\n    query getTvSeries {\r\n        tvseries {\r\n            _id\r\n            title\r\n            description\r\n            rating \r\n            image\r\n        }\r\n    }\r\n`;\r\n\r\nfunction AddTvSeries(props) {\r\n\r\n    const { loading, error, data } = useQuery(GET_TVSERIES);\r\n\r\n    const getTvSeries = () => {\r\n        if(!data){\r\n            return null;\r\n        }\r\n        const tvseriesList = data.tvseries.map(tvserie => {\r\n            return <AddTvSerieItem\r\n            key={tvserie._id}\r\n            title={tvserie.title}\r\n            description={tvserie.description}\r\n            rating={tvserie.rating}\r\n            image={tvserie.image}\r\n            ></AddTvSerieItem>\r\n        })\r\n        return tvseriesList;\r\n    }\r\n\r\n    return <>\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <CreateTvSerie/>\r\n                </div>\r\n                <div className=\"col\">\r\n                    { getTvSeries() }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </>\r\n}\r\nexport default AddTvSeries;","D:\\Documents\\Project\\react-movie-project\\src\\components\\tv\\CreateTvSerie.js",["228"],"import { gql, useMutation } from '@apollo/client';\r\nimport { useState } from 'react';\r\nimport { Button, Form, FormGroup, Input, Label } from 'reactstrap';\r\n\r\nconst CREATE_TVSERIE = gql`\r\n    mutation CreateTvSerie($data: CreateTvSerieInput!) {\r\n        createTvSerie(data: $data) {\r\n             _id\r\n             title\r\n             description\r\n             rating\r\n        }\r\n    }\r\n`;\r\n\r\nfunction CreateTvSeries(props) {\r\n\r\n    const [title, setTitle] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [rating, setRating] = useState('');\r\n\r\n    const [createTvSerie, { data }] = useMutation(CREATE_TVSERIE);\r\n\r\n    const onCreateTvSerie = () => {\r\n        const tvserieData = { \r\n            variables: { \r\n                data: {\r\n                    title,\r\n                    description,\r\n                    rating: Number(rating),\r\n                } \r\n            } \r\n    }\r\n        createTvSerie(tvserieData).then( response => {\r\n            console.log(response);\r\n        });\r\n        resetState();\r\n    }\r\n    const resetState = () => {\r\n        setTitle('');\r\n        setDescription('');\r\n        setRating('');\r\n    }\r\n\r\n    const getOptions = () => {\r\n        let options = [];\r\n        for(let i = 0; i < 11; i++){\r\n            options.push(<option value={i} key={i}>{i}</option>)\r\n        } \r\n        return options;\r\n    }\r\n\r\n    return <>\r\n        <Form onSubmit={e => {\r\n            e.preventDefault();\r\n            onCreateTvSerie()\r\n        }}>\r\n            <FormGroup>\r\n                <Label for=\"title\">Заглавие</Label>\r\n                <Input \r\n                    type=\"title\" \r\n                    name=\"title\" \r\n                    id=\"title\"\r\n                    value={title}\r\n                    onChange={e => setTitle(e.target.value)}\r\n                    placeholder=\"Име на сериала\" />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label for=\"description\">Описание</Label>\r\n                <Input \r\n                    type=\"text\" \r\n                    name=\"description\" \r\n                    id=\"description\"\r\n                    value={description}\r\n                    onChange={e => setDescription(e.target.value)} \r\n                    placeholder=\"Описание на сериала\" />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label for=\"rating\">Рейтинг</Label>\r\n                <Input \r\n                    type=\"select\" \r\n                    name=\"rating\" \r\n                    id=\"rating\" \r\n                    value={rating}\r\n                    onChange={e => setRating(e.target.value)}\r\n                    >\r\n                    { getOptions() }\r\n                </Input> \r\n            </FormGroup>\r\n            <Button type=\"submit\">Добави сериал</Button>\r\n        </Form>\r\n    </>\r\n}\r\nexport default CreateTvSeries;","D:\\Documents\\Project\\react-movie-project\\src\\components\\movie\\AddMovieItem.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\components\\tv\\AddTvSerieItem.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\components\\movie\\Rating.js",[],"D:\\Documents\\Project\\react-movie-project\\src\\components\\tv\\Rating.js",[],{"ruleId":"229","replacedBy":"230"},{"ruleId":"231","replacedBy":"232"},{"ruleId":"229","replacedBy":"233"},{"ruleId":"231","replacedBy":"234"},{"ruleId":"235","severity":1,"message":"236","line":34,"column":7,"nodeType":"237","endLine":34,"endColumn":9,"suggestions":"238"},{"ruleId":"239","severity":1,"message":"240","line":7,"column":5,"nodeType":"241","messageId":"242","endLine":7,"endColumn":11},{"ruleId":"239","severity":1,"message":"240","line":7,"column":5,"nodeType":"241","messageId":"242","endLine":7,"endColumn":11},{"ruleId":"235","severity":1,"message":"236","line":34,"column":7,"nodeType":"237","endLine":34,"endColumn":9,"suggestions":"243"},{"ruleId":"235","severity":1,"message":"244","line":25,"column":8,"nodeType":"237","endLine":25,"endColumn":10,"suggestions":"245"},{"ruleId":"235","severity":1,"message":"246","line":16,"column":8,"nodeType":"237","endLine":16,"endColumn":10,"suggestions":"247"},{"ruleId":"235","severity":1,"message":"248","line":25,"column":8,"nodeType":"237","endLine":25,"endColumn":10,"suggestions":"249"},{"ruleId":"235","severity":1,"message":"246","line":16,"column":8,"nodeType":"237","endLine":16,"endColumn":10,"suggestions":"250"},{"ruleId":"239","severity":1,"message":"240","line":7,"column":5,"nodeType":"241","messageId":"242","endLine":7,"endColumn":11},{"ruleId":"239","severity":1,"message":"240","line":7,"column":5,"nodeType":"241","messageId":"242","endLine":7,"endColumn":11},{"ruleId":"239","severity":1,"message":"251","line":31,"column":7,"nodeType":"241","messageId":"242","endLine":31,"endColumn":18},{"ruleId":"235","severity":1,"message":"252","line":50,"column":8,"nodeType":"237","endLine":50,"endColumn":10,"suggestions":"253"},{"ruleId":"239","severity":1,"message":"254","line":55,"column":21,"nodeType":"241","messageId":"242","endLine":55,"endColumn":25},{"ruleId":"239","severity":1,"message":"255","line":19,"column":13,"nodeType":"241","messageId":"242","endLine":19,"endColumn":20},{"ruleId":"239","severity":1,"message":"256","line":19,"column":22,"nodeType":"241","messageId":"242","endLine":19,"endColumn":27},{"ruleId":"239","severity":1,"message":"254","line":22,"column":27,"nodeType":"241","messageId":"242","endLine":22,"endColumn":31},{"ruleId":"239","severity":1,"message":"255","line":19,"column":13,"nodeType":"241","messageId":"242","endLine":19,"endColumn":20},{"ruleId":"239","severity":1,"message":"256","line":19,"column":22,"nodeType":"241","messageId":"242","endLine":19,"endColumn":27},{"ruleId":"239","severity":1,"message":"254","line":22,"column":29,"nodeType":"241","messageId":"242","endLine":22,"endColumn":33},"no-native-reassign",["257"],"no-negated-in-lhs",["258"],["257"],["258"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.","ArrayExpression",["259"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar",["260"],"React Hook useEffect has a missing dependency: 'loadMovies'. Either include it or remove the dependency array.",["261"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["262"],"React Hook useEffect has a missing dependency: 'loadTVSeries'. Either include it or remove the dependency array.",["263"],["264"],"'CREATE_USER' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getCurrentUser'. Either include it or remove the dependency array.",["265"],"'data' is assigned a value but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"266","fix":"267"},{"desc":"266","fix":"268"},{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"271","fix":"275"},{"desc":"276","fix":"277"},"Update the dependencies array to be: [dispatch, id]",{"range":"278","text":"279"},{"range":"280","text":"279"},"Update the dependencies array to be: [loadMovies]",{"range":"281","text":"282"},"Update the dependencies array to be: [dispatch]",{"range":"283","text":"284"},"Update the dependencies array to be: [loadTVSeries]",{"range":"285","text":"286"},{"range":"287","text":"284"},"Update the dependencies array to be: [getCurrentUser]",{"range":"288","text":"289"},[763,765],"[dispatch, id]",[741,743],[765,767],"[loadMovies]",[510,512],"[dispatch]",[761,763],"[loadTVSeries]",[502,504],[977,979],"[getCurrentUser]"]